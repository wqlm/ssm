<?xml version="1.0" encoding="UTF-8" ?>
<!--mybatis的代码生成器相关配置-->
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!-- 引入配置文件 -->
    <properties resource="db.properties"/>

    <!-- 一个数据库一个context,context的子元素必须按照它给出的顺序
        property*,plugin*,commentGenerator?,jdbcConnection,javaTypeResolver?,
        javaModelGenerator,sqlMapGenerator?,javaClientGenerator?,table+
    -->
    <context id="myContext" targetRuntime="MyBatis3">


        <!-- 这个插件给生成的Java模型对象增加了equals和hashCode方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>-->

        <!-- 注释 -->
        <commentGenerator >
            <!-- 是否取消注释 -->
            <property name="suppressAllComments" value="true"/>
            <!-- 不希望生成的注释中包含时间戳 -->
            <property name="suppressDate" value="true" />
            <!-- 是否  自动为每一个生成的类创建一个构造方法-->
            <property name="constructorBased" value="false"/>
        </commentGenerator>

        <!-- jdbc连接 -->
        <jdbcConnection driverClass="${druid.driverClassName}"
                        connectionURL="${druid.url}"
                        userId="${druid.username}"
                        password="${druid.password}"/>

        <!-- 类型转换 -->
        <javaTypeResolver>
            <!--是否使用bigDecimal，默认false。
                false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer
                true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal-->
            <property name="forceBigDecimals" value="true"/>
        </javaTypeResolver>

        <!-- 生成实体类地址 -->
        <javaModelGenerator targetPackage="com.wqlm.ssm.entity2" targetProject="src/main/java" >
            <!-- 是否让schema作为包的后缀，默认为false -->
            <property name="enableSubPackages" value="true"/>
            <!-- 是否针对string类型的字段在set方法中进行修剪 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- 生成Mapper.xml文件 -->
        <sqlMapGenerator targetPackage="mapper2" targetProject="src/main/resources" >
            <property name="enableSubPackages" value="false" />
        </sqlMapGenerator>

        <!-- 生成 XxxMapper.java 接口-->
        <javaClientGenerator targetPackage="com.wqlm.ssm.mapper2" targetProject="src/main/java" type="XMLMAPPER" >
            <property name="enableSubPackages" value="false" />
        </javaClientGenerator>


        <!--schema即为数据库名(也可以不写该属性), tableName为对应的数据库表名, domainObjectName是要生成的实体类名
            如果想要mapper配置文件加入sql的where条件查询, 可以将enableCountByExample等设为true,
            这样就会生成一个对应Example帮助类, enableCountByExample等设为false时, 就不会生成对应的Example类了.
        -->
        <table tableName="user" domainObjectName="User"
               enableCountByExample="false" enableDeleteByExample="false" enableSelectByExample="false"
               enableUpdateByExample="false" selectByExampleQueryId="false">
            <!--是否使用实际列名-->
            <property name="useActualColumnNames" value="false" />
        </table>
    </context>
</generatorConfiguration>